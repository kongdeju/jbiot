#!/usr/bin/env python
from collections import OrderedDict
import os
import logging
import subprocess

def findDockerSingul(item):
    items = item.split()
    docker=""
    sing = ""
    for item in items:
        if item.startswith("--docker="):
            docker = item.split("=")[-1]
        if item.startswith("--singularity="):
            sing = item.split("=")[-1]
    docker=docker.strip()
    sing = sing.strip()
    return docker,sing

def handlesing(simg):
    #bug fixec
    home = os.environ["HOME"]
    sdir = os.path.join(home,".singularity")
    simgPath = os.path.join(sdir,simg)
    if os.path.exists(simgPath):
        return simgPath
    print "download...%s" % simg 
    simghttp = "http://www.genescret.com:6636/dev-env/singularity/%s" % simg
    cmd = "wget -P %s %s" % (sdir,simghttp)
    print "\t%s" % cmd
    p = subprocess.Popen(cmd,shell=True)
    flag = p.wait()
    if flag == 0:
        print "\t got it."
        return simgPath
    print "\t not found."
    return 

def choosewinner(docker,sing,prefer):
    d = 0
    s = 0
    if docker :
        d = d + 1
    if prefer == "docker":
        d = d * 2
    if sing :
        s = s + 1
    if prefer == "singularity":
        s = s * 2

    if d == s:
        return "none"

    if d > s :
        return "docker"
 
    if d < s :
        spath = handlesing(sing)
        if spath: 
            return "singularity,%s" % spath
        else:
            if d :
                return "docker"
    return "none"
    

def dockersing(cmdfile,prefer="docker"):
    fp = open(cmdfile)
    lines = fp.readlines()
    
    items = []
    for line in lines:
        line = line.strip()
        if not line:
            continue
        items.append(line)

    cmddict = OrderedDict()
    curkey = items[0]
    cmddict[curkey] = []
    for item in items[1:]:
        if item.startswith("#"):
            cmddict[item] = []
            curkey = item
        else:
            cmddict[curkey].append(item)

    afterDict = OrderedDict()
    for tag,cmds in cmddict.items():
        docker,sing = findDockerSingul(tag)
        if not ( docker or sing ):
            afterDict[tag] = cmds
            continue
        
        vcmds = []
        for cmd in cmds:
            vcmd = cmd
            rootDir = "/rootDir"
            cmdelements = cmd.split()
            for i in range(len(cmdelements)):
                element = cmdelements[i]
                if element.startswith("/"):
                    element = rootDir + element
                    cmdelements[i] = element
            cmd = " ".join(cmdelements)
            
            winner =  choosewinner(docker,sing,prefer)
            if winner == "docker":
                vcmd = "docker run --rm -v /:%s -v $PWD:$PWD -v $HOME:$HOME -w $PWD %s %s" % (rootDir,docker,cmd)
            if winner.startswith("singularity"):
                sing = winner.split(",")[-1]
                vcmd = "singularity exec --bind /:%s --bind $PWD:$PWD %s %s " % (rootDir,sing,cmd)
            
            vcmds.append(vcmd)
        
        afterDict[tag] = vcmds


    afterFile = cmdfile.split(".")[0] + ".dockersing.cmd"
    fp = open(afterFile,"w")
    for tag,cmds in afterDict.items():
        line = "\n" + tag + "\n\n"
        fp.write(line)

        for cmd in cmds:
            line = "\t" + cmd + "\n"
            fp.write(line)
    fp.close()

    return afterFile

if __name__ == "__main__":
    from docopt import docopt

    usage = """
    Usage:
        dockersing.py <cmdfile> [--prefer=<docker|singularity>]

    Options:
        -h,--help           will print this screen
        <cmdfile>           cmdfile mostly generated by logrun or file with logrun style
        --prefer=<tech>     choose to prefer  [docker|singularity] when both exist [default: docker].

    """ 
    args = docopt(usage)
    cmdfile = args["<cmdfile>"]
    prefer = args["--prefer"] 
    if prefer not in ["docker","singularity"]:
        print usage
        sys.exit()
    dockersing(cmdfile,prefer) 
